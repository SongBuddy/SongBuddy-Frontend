import 'package:flutter/material.dart';
import 'dart:ui';
import '../constants/app_colors.dart';
import '../constants/app_text_styles.dart';
import '../services/backend_service.dart';
import '../providers/google_auth_provider.dart';
import '../utils/error_snackbar_utils.dart';
import '../models/Post.dart';

class CreatePostScreen extends StatefulWidget {
  const CreatePostScreen({super.key});

  @override
  State<CreatePostScreen> createState() => _CreatePostScreenState();
}

class _CreatePostScreenState extends State<CreatePostScreen> {
  late final TextEditingController _descriptionController;
  late final GoogleAuthProvider _authProvider;
  late final BackendService _backendService;
  
  bool _isPosting = false;
  final int _maxDescriptionLength = 280;

  @override
  void initState() {
    super.initState();
    _descriptionController = TextEditingController();
    _authProvider = GoogleAuthProvider();
    _backendService = BackendService();
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _createPost() async {
    if (_descriptionController.text.trim().isEmpty) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'Please enter a description for your post',
      );
      return;
    }

    if (_authProvider.userId == null) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'You must be signed in to create a post',
      );
      return;
    }

    setState(() {
      _isPosting = true;
    });

    try {
      // Create a simple post without track information
      final post = Post(
        id: '', // Will be generated by backend
        userId: _authProvider.userId!,
        username: _authProvider.user?['displayName'] ?? 'User',
        userProfilePicture: _authProvider.user?['photoURL'] ?? '',
        songName: 'General Post', // Placeholder since we don't have music
        artistName: 'User', // Placeholder since we don't have music
        songImage: '', // No image for general posts
        description: _descriptionController.text.trim(),
        likeCount: 0,
        createdAt: DateTime.now(),
        timeline: 'now',
        isLikedByCurrentUser: false,
      );

      final createdPost = await _backendService.createPost(post);
      
      if (createdPost.id.isNotEmpty) {
        ErrorSnackbarUtils.showSuccessSnackbar(
          context,
          'Post created successfully!',
        );
        Navigator.pop(context, true);
      } else {
        ErrorSnackbarUtils.showErrorSnackbar(
          context,
          'Failed to create post. Please try again.',
        );
      }
    } catch (e) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'Error creating post: $e',
      );
    } finally {
      if (mounted) {
        setState(() {
          _isPosting = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.darkBackgroundStart,
      appBar: AppBar(
        backgroundColor: AppColors.darkBackgroundStart,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.close, color: AppColors.onDarkPrimary),
          onPressed: () => Navigator.pop(context),
        ),
        title: Text(
          'Create Post',
          style: AppTextStyles.heading2OnDark,
        ),
        actions: [
          TextButton(
            onPressed: _isPosting ? null : _createPost,
            child: Text(
              'Post',
              style: AppTextStyles.bodyOnDark.copyWith(
                color: _isPosting 
                    ? AppColors.onDarkSecondary 
                    : AppColors.primary,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // User info section
              Row(
                children: [
                  CircleAvatar(
                    radius: 20,
                    backgroundColor: AppColors.onDarkPrimary.withOpacity(0.12),
                    backgroundImage: _authProvider.user?['photoURL'] != null 
                        ? NetworkImage(_authProvider.user!['photoURL'])
                        : null,
                    child: _authProvider.user?['photoURL'] == null
                        ? const Icon(Icons.person, color: AppColors.onDarkPrimary, size: 20)
                        : null,
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          _authProvider.user?['displayName'] ?? 'User',
                          style: AppTextStyles.bodyOnDark.copyWith(
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        Text(
                          _authProvider.user?['email'] ?? '',
                          style: AppTextStyles.captionOnDark.copyWith(
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              
              const SizedBox(height: 24),
              
              // Description input
              Expanded(
                child: TextField(
                  controller: _descriptionController,
                  maxLines: null,
                  maxLength: _maxDescriptionLength,
                  style: AppTextStyles.bodyOnDark,
                  decoration: InputDecoration(
                    hintText: 'What\'s on your mind? Share your thoughts...',
                    hintStyle: AppTextStyles.bodyOnDark.copyWith(
                      color: AppColors.onDarkSecondary,
                    ),
                    border: InputBorder.none,
                    counterStyle: AppTextStyles.captionOnDark.copyWith(
                      color: _descriptionController.text.length > _maxDescriptionLength * 0.9
                          ? AppColors.error
                          : AppColors.onDarkSecondary,
                    ),
                  ),
                ),
              ),
              
              // Character count and post button
              Container(
                padding: const EdgeInsets.symmetric(vertical: 12),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      '${_descriptionController.text.length}/$_maxDescriptionLength',
                      style: AppTextStyles.captionOnDark.copyWith(
                        color: _descriptionController.text.length > _maxDescriptionLength * 0.9
                            ? AppColors.error
                            : AppColors.onDarkSecondary,
                      ),
                    ),
                    ElevatedButton(
                      onPressed: _isPosting ? null : _createPost,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.primary,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 24,
                          vertical: 12,
                        ),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                        ),
                      ),
                      child: _isPosting
                          ? const SizedBox(
                              width: 16,
                              height: 16,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            )
                          : const Text('Post'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
