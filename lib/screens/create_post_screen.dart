import 'package:flutter/material.dart';
import 'dart:ui';
import 'dart:convert';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:google_fonts/google_fonts.dart';
import '../constants/app_colors.dart';
import '../constants/app_text_styles.dart';
import '../models/Post.dart';
import '../services/backend_service.dart';
import '../providers/auth_provider.dart';
import '../services/spotify_service.dart';
import '../utils/error_snackbar_utils.dart';

class CreatePostScreen extends StatefulWidget {
  final Map<String, dynamic> selectedTrack;
  final String selectedTrackId;

  const CreatePostScreen({
    super.key,
    required this.selectedTrack,
    required this.selectedTrackId,
  });

  @override
  State<CreatePostScreen> createState() => _CreatePostScreenState();
}

class _CreatePostScreenState extends State<CreatePostScreen> {
  late final TextEditingController _descriptionController;
  late final AuthProvider _authProvider;
  late final BackendService _backendService;
  late final SpotifyService _spotifyService;
  
  bool _isPosting = false;
  final int _maxDescriptionLength = 280;

  @override
  void initState() {
    super.initState();
    _descriptionController = TextEditingController();
    _authProvider = AuthProvider();
    _backendService = BackendService();
    _spotifyService = SpotifyService();
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    super.dispose();
  }

  Future<void> _createPost() async {
    print('üöÄ ===== STARTING POST CREATION =====');
    print('üîç CreatePost: User authenticated: ${_authProvider.isAuthenticated}');
    print('üîç CreatePost: Access token available: ${_authProvider.accessToken != null}');
    print('üîç CreatePost: Selected track: ${widget.selectedTrack['name']}');
    print('üîç CreatePost: Description length: ${_descriptionController.text.length}');
    
    // Check if user is authenticated
    if (!_authProvider.isAuthenticated) {
      _showSnackBar('Please log in to create a post', Colors.orange);
      return;
    }
    
    if (_authProvider.accessToken == null) {
      _showSnackBar('Access token not found. Please log in again.', Colors.orange);
      return;
    }

    setState(() {
      _isPosting = true;
    });

    try {
      // Fetch current user data from Spotify API
      print('üîç CreatePost: Fetching user data from Spotify API...');
      final userData = await _spotifyService.getCurrentUser(_authProvider.accessToken!);
      
      // Extract user information from Spotify API response
      final userId = userData['id'] as String? ?? '';
      final displayName = userData['display_name'] as String? ?? '';
      final profilePicture = (userData['images'] as List<dynamic>?)?.isNotEmpty == true
          ? userData['images'][0]['url'] as String
          : '';
      
      print('üîç CreatePost: Spotify User ID: $userId');
      print('üîç CreatePost: Spotify Display Name: $displayName');
      print('üîç CreatePost: Spotify Profile Picture: $profilePicture');
      
      // Ensure we have a valid username
      final finalUsername = displayName.trim().isNotEmpty ? displayName.trim() : 'Spotify User';
      print('üîç CreatePost: Final username: $finalUsername');
      
      Post post;
      try {
        post = Post(
          id: '', // Will be generated by backend
          userId: userId,
          username: finalUsername,
          userProfilePicture: profilePicture,
          songName: widget.selectedTrack['name'] ?? 'Unknown Song',
          artistName: (widget.selectedTrack['artists'] as List<dynamic>?)
              ?.map((artist) => artist['name'] as String)
              .join(', ') ?? 'Unknown Artist',
          songImage: (widget.selectedTrack['album']?['images'] as List<dynamic>?)
              ?.isNotEmpty == true
              ? widget.selectedTrack['album']['images'][0]['url'] as String
              : '',
          description: _descriptionController.text.trim().isEmpty ? null : _descriptionController.text.trim(),
          likeCount: 0,
          createdAt: DateTime.now(),
          timeline: 'now',
          isLikedByCurrentUser: false,
        );
        print('‚úÖ CreatePost: Post object created successfully');
      } catch (e) {
        print('‚ùå CreatePost: Error creating Post object: $e');
        throw Exception('Failed to create post object: $e');
      }
      
      // Debug: Print individual fields before creating Post
      print('üîç CreatePost: userId: "$userId"');
      print('üîç CreatePost: username: "$finalUsername"');
      print('üîç CreatePost: userProfilePicture: "$profilePicture"');
      print('üîç CreatePost: songName: "${widget.selectedTrack['name'] ?? 'NULL'}"');
      print('üîç CreatePost: artistName: "${(widget.selectedTrack['artists'] as List<dynamic>?)?.map((artist) => artist['name'] as String).join(', ') ?? 'NULL'}"');
      print('üîç CreatePost: songImage: "${(widget.selectedTrack['album']?['images'] as List<dynamic>?)?.isNotEmpty == true ? widget.selectedTrack['album']['images'][0]['url'] as String : 'NULL'}"');
      
      // Debug: Print the post data being sent
      print('üîç CreatePost: Post data: ${post.toJson()}');
      
      // Comprehensive logging of all post information
      print('üìù ===== POST CREATION SUMMARY =====');
      print('üë§ USER INFORMATION:');
      print('   ‚Ä¢ User ID: $userId');
      print('   ‚Ä¢ Username: $finalUsername');
      print('   ‚Ä¢ Profile Picture: $profilePicture');
      print('üéµ SONG INFORMATION:');
      print('   ‚Ä¢ Song Name: ${widget.selectedTrack['name'] ?? 'Unknown Song'}');
      print('   ‚Ä¢ Artist Name: ${(widget.selectedTrack['artists'] as List<dynamic>?)?.map((artist) => artist['name'] as String).join(', ') ?? 'Unknown Artist'}');
      print('   ‚Ä¢ Song Image: ${(widget.selectedTrack['album']?['images'] as List<dynamic>?)?.isNotEmpty == true ? widget.selectedTrack['album']['images'][0]['url'] as String : 'No Image'}');
      print('üìù POST CONTENT:');
      print('   ‚Ä¢ Description: ${_descriptionController.text.trim().isEmpty ? 'No description' : _descriptionController.text.trim()}');
      print('   ‚Ä¢ Like Count: 0');
      print('   ‚Ä¢ Created At: ${DateTime.now()}');
      print('   ‚Ä¢ Timeline: now');
      print('üì§ SENDING TO BACKEND:');
      print('   ‚Ä¢ URL: http://192.168.227.108:3000/api/posts/create');
      print('   ‚Ä¢ JSON: ${jsonEncode(post.toJson())}');
      print('=====================================');

      await _backendService.createPost(post);
      
      if (mounted) {
        ErrorSnackbarUtils.showSuccessSnackbar(context, 'Post created successfully!');
        Navigator.pop(context, true); // Return true to indicate success
      }
    } catch (e) {
      if (mounted) {
        ErrorSnackbarUtils.showErrorSnackbar(context, e, operation: 'create_post');
      }
    } finally {
      if (mounted) {
        setState(() {
          _isPosting = false;
        });
      }
    }
  }

  void _showSnackBar(String message, Color color) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: color,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final track = widget.selectedTrack;
    final albumImages = track['album']?['images'] as List<dynamic>? ?? [];
    final trackImage = albumImages.isNotEmpty 
        ? albumImages.first['url'] as String 
        : '';
    final artists = track['artists'] as List<dynamic>? ?? [];
    final artistNames = artists.map((artist) => artist['name'] as String).join(', ');

    return Scaffold(
      backgroundColor: Colors.transparent,
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [AppColors.darkBackgroundStart, AppColors.darkBackgroundEnd],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              // Top bar
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                child: Row(
                  children: [
                    IconButton(
                      onPressed: () => Navigator.pop(context),
                      icon: const Icon(
                        Icons.arrow_back,
                        color: AppColors.onDarkPrimary,
                      ),
                    ),
                    const Spacer(),
                    Text(
                      'Create Post',
                      style: AppTextStyles.heading2OnDark.copyWith(
                        fontWeight: FontWeight.w800,
                        fontSize: 20,
                        letterSpacing: 0.6,
                      ),
                    ),
                    const Spacer(),
                    if (_isPosting)
                      const SizedBox(
                        width: 24,
                        height: 24,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          color: AppColors.primary,
                        ),
                      )
                    else
                      TextButton(
                        onPressed: _createPost,
                        child: Text(
                          'Post',
                          style: AppTextStyles.bodyOnDark.copyWith(
                            color: AppColors.primary,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                      ),
                  ],
                ),
              ),

              // Content (modern composer)
              Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      // Hero cover banner
                      _buildHeroBanner(trackImage, track, artistNames),
                      const SizedBox(height: 16),

                      // Glass input card
                      _ComposerGlass(
                        borderRadius: 12,
                        child: Padding(
                          padding: const EdgeInsets.all(12),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('Say something about this track', style: AppTextStyles.bodyOnDark.copyWith(fontWeight: FontWeight.w600)),
                              const SizedBox(height: 8),
                              _ComposerInput(
                                controller: _descriptionController,
                                maxLength: _maxDescriptionLength,
                                onChanged: (_) => setState(() {}),
                              ),
                              const SizedBox(height: 6),
                              Align(alignment: Alignment.centerRight, child: _buildCharacterCount()),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildSelectedTrackCard(Map<String, dynamic> track, String trackImage, String artistNames) {
    return Container(
      decoration: BoxDecoration(
        color: AppColors.onDarkPrimary.withOpacity(0.05),
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: AppColors.onDarkPrimary.withOpacity(0.1),
          width: 1,
        ),
      ),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Row(
          children: [
            // Track image
            ClipRRect(
              borderRadius: BorderRadius.circular(8),
              child: trackImage.isNotEmpty
                  ? CachedNetworkImage(
                      imageUrl: trackImage,
                      width: 60,
                      height: 60,
                      fit: BoxFit.cover,
                      memCacheWidth: 120,
                      memCacheHeight: 120,
                      errorWidget: (context, url, error) => _buildPlaceholderImage(),
                    )
                  : _buildPlaceholderImage(),
            ),
            
            const SizedBox(width: 16),
            
            // Track info
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    track['name'] ?? 'Unknown Song',
                    style: AppTextStyles.bodyOnDark.copyWith(
                      fontWeight: FontWeight.w600,
                      fontSize: 16,
                    ),
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                  const SizedBox(height: 4),
                  Text(
                    artistNames,
                    style: AppTextStyles.captionOnDark.copyWith(
                      color: AppColors.onDarkSecondary,
                    ),
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ),
            ),
            
            // Check icon
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: AppColors.primary.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: const Icon(
                Icons.check,
                color: AppColors.primary,
                size: 20,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPlaceholderImage() {
    return Container(
      width: 60,
      height: 60,
      decoration: BoxDecoration(
        color: AppColors.onDarkPrimary.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
    );
  }

  // Removed old TextField-based input; using custom input below

  Widget _buildCharacterCount() {
    final currentLength = _descriptionController.text.length;
    final remaining = _maxDescriptionLength - currentLength;
    
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        Text(
          '$currentLength/$_maxDescriptionLength',
          style: AppTextStyles.captionOnDark.copyWith(
            color: remaining < 20 
                ? Colors.orange 
                : AppColors.onDarkSecondary.withOpacity(0.6),
            fontSize: 11,
          ),
        ),
      ],
    );
  }

  Widget _buildHeroBanner(String trackImage, Map<String, dynamic> track, String artistNames) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(16),
      child: Stack(
        children: [
          // Background cover (blurred fallback)
          Container(
            height: 180,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  AppColors.onDarkPrimary.withOpacity(0.10),
                  AppColors.onDarkPrimary.withOpacity(0.04),
                ],
              ),
              border: Border.all(color: AppColors.onDarkPrimary.withOpacity(0.08)),
            ),
          ),
          Positioned.fill(
            child: Row(
              children: [
                // Cover
                Padding(
                  padding: const EdgeInsets.all(12),
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(12),
                    child: trackImage.isNotEmpty
                        ? CachedNetworkImage(
                            imageUrl: trackImage,
                            width: 120,
                            height: 120,
                            fit: BoxFit.cover,
                            memCacheWidth: 240,
                            memCacheHeight: 240,
                          )
                        : _buildPlaceholderImage(),
                  ),
                ),
                const SizedBox(width: 8),
                // Texts
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.only(right: 12, top: 12, bottom: 12),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          track['name'] ?? 'Unknown Song',
                          style: AppTextStyles.heading2OnDark.copyWith(fontSize: 18, fontWeight: FontWeight.w700),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                        const SizedBox(height: 6),
                        Text(
                          artistNames,
                          style: AppTextStyles.captionOnDark.copyWith(color: AppColors.onDarkSecondary),
                          maxLines: 1,
                          overflow: TextOverflow.ellipsis,
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class _ComposerGlass extends StatelessWidget {
  final Widget child;
  final double borderRadius;
  const _ComposerGlass({required this.child, this.borderRadius = 12});

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(borderRadius),
      child: BackdropFilter(
        filter: ImageFilter.blur(sigmaX: 12, sigmaY: 12),
        child: Container(
          decoration: BoxDecoration(
            color: AppColors.onDarkPrimary.withOpacity(0.03),
            borderRadius: BorderRadius.circular(borderRadius),
            border: Border.all(color: AppColors.onDarkPrimary.withOpacity(0.08)),
          ),
          child: child,
        ),
      ),
    );
  }
}

class _ComposerInput extends StatefulWidget {
  final TextEditingController controller;
  final int maxLength;
  final ValueChanged<String>? onChanged;
  const _ComposerInput({required this.controller, required this.maxLength, this.onChanged});

  @override
  State<_ComposerInput> createState() => _ComposerInputState();
}

class _ComposerInputState extends State<_ComposerInput> {
  late FocusNode _focusNode;
  bool _focused = false;

  @override
  void initState() {
    super.initState();
    _focusNode = FocusNode();
    _focusNode.addListener(() {
      setState(() => _focused = _focusNode.hasFocus);
    });
  }

  @override
  void dispose() {
    _focusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => _focusNode.requestFocus(),
      child: Container(
        decoration: BoxDecoration(
          color: Colors.transparent,
          borderRadius: BorderRadius.circular(10),
          border: Border.all(
            color: (_focused ? AppColors.primary : AppColors.onDarkPrimary.withOpacity(0.08)),
            width: 1,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.all(12),
          child: EditableText(
            controller: widget.controller,
            focusNode: _focusNode,
            style: AppTextStyles.bodyOnDark.copyWith(color: Colors.white, fontSize: 14),
            cursorColor: Colors.white,
            backgroundCursorColor: Colors.transparent,
            maxLines: 4,
            selectionColor: AppColors.primary.withOpacity(0.25),
            keyboardType: TextInputType.multiline,
            onChanged: widget.onChanged,
          ),
        ),
      ),
    );
  }
}
