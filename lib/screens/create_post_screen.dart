import 'package:flutter/material.dart';
import 'dart:ui';
import '../constants/app_colors.dart';
import '../constants/app_text_styles.dart';
import '../services/backend_service.dart';
import '../providers/google_auth_provider.dart';
import '../utils/error_snackbar_utils.dart';
import '../models/Post.dart';
import '../services/musicbrainz_service.dart';

class CreatePostScreen extends StatefulWidget {
  const CreatePostScreen({super.key});

  @override
  State<CreatePostScreen> createState() => _CreatePostScreenState();
}

class _CreatePostScreenState extends State<CreatePostScreen> {
  late final TextEditingController _descriptionController;
  late final TextEditingController _searchController;
  late final GoogleAuthProvider _authProvider;
  late final BackendService _backendService;
  late final MusicBrainzService _musicBrainzService;
  
  bool _isPosting = false;
  bool _isSearching = false;
  final int _maxDescriptionLength = 280;
  
  // Music search
  List<Map<String, dynamic>> _searchResults = [];
  Map<String, dynamic>? _selectedTrack;

  @override
  void initState() {
    super.initState();
    _descriptionController = TextEditingController();
    _searchController = TextEditingController();
    _authProvider = GoogleAuthProvider();
    _backendService = BackendService();
    _musicBrainzService = MusicBrainzService();
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    _searchController.dispose();
    _musicBrainzService.dispose();
    super.dispose();
  }

  Future<void> _createPost() async {
    if (_descriptionController.text.trim().isEmpty) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'Please enter a description for your post',
      );
      return;
    }

    if (_authProvider.userId == null) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'You must be signed in to create a post',
      );
      return;
    }

    setState(() {
      _isPosting = true;
    });

    try {
      // Create a post with track information if selected
      final post = Post(
        id: '', // Will be generated by backend
        userId: _authProvider.userId!,
        username: _authProvider.user?['displayName'] ?? 'User',
        userProfilePicture: _authProvider.user?['photoURL'] ?? '',
        songName: _selectedTrack?['title'] ?? 'General Post',
        artistName: _selectedTrack?['artist-credit']?[0]?['name'] ?? 'User',
        songImage: _selectedTrack?['releases']?[0]?['cover-art-archive']?['front'] ?? '',
        description: _descriptionController.text.trim(),
        likeCount: 0,
        createdAt: DateTime.now(),
        timeline: 'now',
        isLikedByCurrentUser: false,
      );

      final createdPost = await _backendService.createPost(post);
      
      if (createdPost.id.isNotEmpty) {
        ErrorSnackbarUtils.showSuccessSnackbar(
          context,
          'Post created successfully!',
        );
        Navigator.pop(context, true);
      } else {
        ErrorSnackbarUtils.showErrorSnackbar(
          context,
          'Failed to create post. Please try again.',
        );
      }
    } catch (e) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'Error creating post: $e',
      );
    } finally {
      if (mounted) {
        setState(() {
          _isPosting = false;
        });
      }
    }
  }

  Future<void> _searchMusic(String query) async {
    if (query.trim().isEmpty) {
      setState(() {
        _searchResults = [];
      });
      return;
    }

    setState(() {
      _isSearching = true;
    });

    try {
      final results = await _musicBrainzService.searchRecordings(query, limit: 10);
      setState(() {
        _searchResults = results;
      });
    } catch (e) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'Search failed: $e',
      );
    } finally {
      setState(() {
        _isSearching = false;
      });
    }
  }

  void _selectTrack(Map<String, dynamic> track) {
    setState(() {
      _selectedTrack = track;
      _searchController.clear();
      _searchResults = [];
    });
  }

  void _clearSelectedTrack() {
    setState(() {
      _selectedTrack = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.darkBackgroundStart,
      appBar: AppBar(
        backgroundColor: AppColors.darkBackgroundStart,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.close, color: AppColors.onDarkPrimary),
          onPressed: () => Navigator.pop(context),
        ),
        title: Text(
          'Create Post',
          style: AppTextStyles.heading2OnDark,
        ),
        actions: [
          TextButton(
            onPressed: _isPosting ? null : _createPost,
            child: Text(
              'Post',
              style: AppTextStyles.bodyOnDark.copyWith(
                color: _isPosting 
                    ? AppColors.onDarkSecondary 
                    : AppColors.primary,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // User info section
              Row(
                children: [
                  CircleAvatar(
                    radius: 20,
                    backgroundColor: AppColors.onDarkPrimary.withOpacity(0.12),
                    backgroundImage: _authProvider.user?['photoURL'] != null 
                        ? NetworkImage(_authProvider.user!['photoURL'])
                        : null,
                    child: _authProvider.user?['photoURL'] == null
                        ? const Icon(Icons.person, color: AppColors.onDarkPrimary, size: 20)
                        : null,
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          _authProvider.user?['displayName'] ?? 'User',
                          style: AppTextStyles.bodyOnDark.copyWith(
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        Text(
                          _authProvider.user?['email'] ?? '',
                          style: AppTextStyles.captionOnDark.copyWith(
                            fontSize: 12,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              
              const SizedBox(height: 24),
              
              // Music search section
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: AppColors.onDarkPrimary.withOpacity(0.05),
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(
                    color: AppColors.onDarkPrimary.withOpacity(0.1),
                    width: 1,
                  ),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'Search Music (Optional)',
                      style: AppTextStyles.bodyOnDark.copyWith(
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    const SizedBox(height: 12),
                    TextField(
                      controller: _searchController,
                      style: AppTextStyles.bodyOnDark,
                      decoration: InputDecoration(
                        hintText: 'Search for a song, artist, or album...',
                        hintStyle: AppTextStyles.bodyOnDark.copyWith(
                          color: AppColors.onDarkSecondary,
                        ),
                        prefixIcon: const Icon(Icons.search, color: AppColors.onDarkSecondary),
                        suffixIcon: _isSearching
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(strokeWidth: 2),
                              )
                            : null,
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(
                            color: AppColors.onDarkPrimary.withOpacity(0.2),
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: BorderSide(
                            color: AppColors.onDarkPrimary.withOpacity(0.2),
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(
                            color: AppColors.primary,
                          ),
                        ),
                      ),
                      onChanged: (value) {
                        if (value.length > 2) {
                          _searchMusic(value);
                        } else {
                          setState(() {
                            _searchResults = [];
                          });
                        }
                      },
                    ),
                    
                    // Search results
                    if (_searchResults.isNotEmpty) ...[
                      const SizedBox(height: 12),
                      SizedBox(
                        height: 200,
                        child: ListView.builder(
                          itemCount: _searchResults.length,
                          itemBuilder: (context, index) {
                            final track = _searchResults[index];
                            return ListTile(
                              leading: const Icon(Icons.music_note, color: AppColors.primary),
                              title: Text(
                                track['title'] ?? 'Unknown Title',
                                style: AppTextStyles.bodyOnDark.copyWith(
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              subtitle: Text(
                                track['artist-credit']?[0]?['name'] ?? 'Unknown Artist',
                                style: AppTextStyles.captionOnDark,
                              ),
                              onTap: () => _selectTrack(track),
                            );
                          },
                        ),
                      ),
                    ],
                    
                    // Selected track
                    if (_selectedTrack != null) ...[
                      const SizedBox(height: 12),
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: AppColors.primary.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(
                            color: AppColors.primary.withOpacity(0.3),
                          ),
                        ),
                        child: Row(
                          children: [
                            const Icon(Icons.check_circle, color: AppColors.primary, size: 20),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    _selectedTrack!['title'] ?? 'Unknown Title',
                                    style: AppTextStyles.bodyOnDark.copyWith(
                                      fontWeight: FontWeight.w600,
                                    ),
                                  ),
                                  Text(
                                    _selectedTrack!['artist-credit']?[0]?['name'] ?? 'Unknown Artist',
                                    style: AppTextStyles.captionOnDark,
                                  ),
                                ],
                              ),
                            ),
                            IconButton(
                              icon: const Icon(Icons.close, color: AppColors.onDarkSecondary),
                              onPressed: _clearSelectedTrack,
                            ),
                          ],
                        ),
                      ),
                    ],
                  ],
                ),
              ),
              
              const SizedBox(height: 24),
              
              // Description input
              Expanded(
                child: TextField(
                  controller: _descriptionController,
                  maxLines: null,
                  maxLength: _maxDescriptionLength,
                  style: AppTextStyles.bodyOnDark,
                  decoration: InputDecoration(
                    hintText: _selectedTrack != null 
                        ? 'Share your thoughts about this track...'
                        : 'What\'s on your mind? Share your thoughts...',
                    hintStyle: AppTextStyles.bodyOnDark.copyWith(
                      color: AppColors.onDarkSecondary,
                    ),
                    border: InputBorder.none,
                    counterStyle: AppTextStyles.captionOnDark.copyWith(
                      color: _descriptionController.text.length > _maxDescriptionLength * 0.9
                          ? AppColors.error
                          : AppColors.onDarkSecondary,
                    ),
                  ),
                ),
              ),
              
              // Character count and post button
              Container(
                padding: const EdgeInsets.symmetric(vertical: 12),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      '${_descriptionController.text.length}/$_maxDescriptionLength',
                      style: AppTextStyles.captionOnDark.copyWith(
                        color: _descriptionController.text.length > _maxDescriptionLength * 0.9
                            ? AppColors.error
                            : AppColors.onDarkSecondary,
                      ),
                    ),
                    ElevatedButton(
                      onPressed: _isPosting ? null : _createPost,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: AppColors.primary,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 24,
                          vertical: 12,
                        ),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(20),
                        ),
                      ),
                      child: _isPosting
                          ? const SizedBox(
                              width: 16,
                              height: 16,
                              child: CircularProgressIndicator(
                                strokeWidth: 2,
                                valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                              ),
                            )
                          : const Text('Post'),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
