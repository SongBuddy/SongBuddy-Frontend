import 'package:flutter/material.dart';
import 'dart:ui';
import '../constants/app_colors.dart';
import '../constants/app_text_styles.dart';
import '../services/backend_service.dart';
import '../providers/google_auth_provider.dart';
import '../utils/error_snackbar_utils.dart';
import '../models/Post.dart';
import '../services/musicbrainz_service.dart';

class CreatePostScreen extends StatefulWidget {
  const CreatePostScreen({super.key});

  @override
  State<CreatePostScreen> createState() => _CreatePostScreenState();
}

class _CreatePostScreenState extends State<CreatePostScreen> with TickerProviderStateMixin {
  late final TextEditingController _descriptionController;
  late final TextEditingController _searchController;
  late final GoogleAuthProvider _authProvider;
  late final BackendService _backendService;
  late final MusicBrainzService _musicBrainzService;
  late final AnimationController _searchAnimationController;
  late final AnimationController _fabAnimationController;
  
  bool _isPosting = false;
  bool _isSearching = false;
  final int _maxDescriptionLength = 280;
  
  // Music search
  List<Map<String, dynamic>> _searchResults = [];
  Map<String, dynamic>? _selectedTrack;

  @override
  void initState() {
    super.initState();
    _descriptionController = TextEditingController();
    _searchController = TextEditingController();
    _authProvider = GoogleAuthProvider();
    _backendService = BackendService();
    _musicBrainzService = MusicBrainzService();
    _searchAnimationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _fabAnimationController = AnimationController(
      duration: const Duration(milliseconds: 200),
      vsync: this,
    );
    
    _fabAnimationController.forward();
  }

  @override
  void dispose() {
    _descriptionController.dispose();
    _searchController.dispose();
    _musicBrainzService.dispose();
    _searchAnimationController.dispose();
    _fabAnimationController.dispose();
    super.dispose();
  }

  Future<void> _createPost() async {
    if (_descriptionController.text.trim().isEmpty) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'Please write something to share!',
      );
      return;
    }

    if (!mounted) return;

    setState(() {
      _isPosting = true;
    });

    try {
      // Create a post with track information if selected
      final post = Post(
        id: '', // Will be generated by backend
        userId: _authProvider.userId!,
        username: _authProvider.user?['displayName'] ?? 'User',
        userProfilePicture: _authProvider.user?['photoURL'] ?? '',
        songName: _selectedTrack?['title'] ?? 'General Post',
        artistName: _selectedTrack?['artist-credit']?[0]?['name'] ?? 'User',
        songImage: _selectedTrack?['releases']?[0] != null 
            ? _musicBrainzService.getCoverArtUrl(_selectedTrack!['releases'][0]['id'])
            : '',
        description: _descriptionController.text.trim(),
        likeCount: 0,
        createdAt: DateTime.now(),
        timeline: 'now',
        isLikedByCurrentUser: false,
      );

      final createdPost = await _backendService.createPost(post);
      
      if (createdPost.id.isNotEmpty) {
        ErrorSnackbarUtils.showSuccessSnackbar(
          context,
          'Post created successfully!',
        );
        Navigator.pop(context, true);
      } else {
        throw Exception('Failed to create post');
      }
    } catch (e) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'Failed to create post: $e',
      );
    } finally {
      if (mounted) {
        setState(() {
          _isPosting = false;
        });
      }
    }
  }

  Future<void> _searchMusic(String query) async {
    if (query.trim().isEmpty) {
      setState(() {
        _searchResults = [];
      });
      _searchAnimationController.reverse();
      return;
    }

    setState(() {
      _isSearching = true;
    });

    try {
      final results = await _musicBrainzService.searchRecordings(query, limit: 10);
      setState(() {
        _searchResults = results;
      });
      _searchAnimationController.forward();
    } catch (e) {
      ErrorSnackbarUtils.showErrorSnackbar(
        context,
        'Search failed: $e',
      );
    } finally {
      setState(() {
        _isSearching = false;
      });
    }
  }

  void _selectTrack(Map<String, dynamic> track) {
    setState(() {
      _selectedTrack = track;
      _searchController.clear();
      _searchResults = [];
    });
    _searchAnimationController.reverse();
  }

  void _clearSelectedTrack() {
    setState(() {
      _selectedTrack = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.darkBackgroundStart,
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              AppColors.darkBackgroundStart,
              AppColors.darkBackgroundMid,
              AppColors.darkBackgroundEnd,
            ],
          ),
        ),
        child: SafeArea(
          child: Column(
            children: [
              _buildHeader(),
              Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.all(20),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      _buildUserInfo(),
                      const SizedBox(height: 24),
                      _buildMusicSearch(),
                      const SizedBox(height: 24),
                      _buildDescriptionInput(),
                    ],
                  ),
                ),
              ),
              _buildBottomBar(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 16),
      decoration: BoxDecoration(
        color: AppColors.glassBackground,
        border: Border(
          bottom: BorderSide(
            color: AppColors.glassBorder,
            width: 1,
          ),
        ),
      ),
      child: Row(
        children: [
          GestureDetector(
            onTap: () => Navigator.pop(context),
            child: Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: AppColors.glassBackground,
                borderRadius: BorderRadius.circular(12),
                border: Border.all(
                  color: AppColors.glassBorder,
                  width: 1,
                ),
              ),
              child: const Icon(
                Icons.close,
                color: AppColors.onDarkPrimary,
                size: 20,
              ),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Text(
              'Create Post',
              style: AppTextStyles.heading2OnDark.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          AnimatedBuilder(
            animation: _fabAnimationController,
            builder: (context, child) {
              return Transform.scale(
                scale: _fabAnimationController.value,
                child: GestureDetector(
                  onTap: _isPosting ? null : _createPost,
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                    decoration: BoxDecoration(
                      gradient: LinearGradient(
                        colors: _isPosting
                            ? [AppColors.onDarkTertiary, AppColors.onDarkTertiary]
                            : [AppColors.primary, AppColors.primaryAccent],
                      ),
                      borderRadius: BorderRadius.circular(20),
                      boxShadow: [
                        BoxShadow(
                          color: AppColors.primary.withOpacity(0.3),
                          blurRadius: 10,
                          offset: const Offset(0, 4),
                        ),
                      ],
                    ),
                    child: _isPosting
                        ? const SizedBox(
                            width: 16,
                            height: 16,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              color: Colors.white,
                            ),
                          )
                        : Text(
              'Post',
              style: AppTextStyles.bodyOnDark.copyWith(
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                  ),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildUserInfo() {
    final user = _authProvider.user;
    if (user == null) return const SizedBox.shrink();

    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            AppColors.glassBackgroundStrong,
            AppColors.glassBackground,
          ],
        ),
        border: Border.all(
          color: AppColors.glassBorder,
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: AppColors.shadowDark,
            blurRadius: 15,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      child: Row(
        children: [
          Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              shape: BoxShape.circle,
              gradient: LinearGradient(
                colors: [
                  AppColors.primary,
                  AppColors.primaryAccent,
                ],
              ),
            ),
            child: ClipOval(
              child: user['photoURL'] != null
                  ? Image.network(
                      user['photoURL'],
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) {
                        return const Icon(
                          Icons.person,
                          color: Colors.white,
                          size: 25,
                        );
                      },
                    )
                  : const Icon(
                      Icons.person,
                      color: Colors.white,
                      size: 25,
                    ),
            ),
          ),
          const SizedBox(width: 16),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  user['displayName'] ?? 'User',
                  style: AppTextStyles.bodyOnDark.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  'Share your thoughts...',
                  style: AppTextStyles.captionOnDark.copyWith(
                    color: AppColors.onDarkSecondary,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildMusicSearch() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        color: AppColors.glassBackground,
        border: Border.all(
          color: AppColors.glassBorder,
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: AppColors.shadowDark,
            blurRadius: 15,
            offset: const Offset(0, 5),
          ),
        ],
      ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.music_note,
                color: AppColors.primary,
                size: 20,
              ),
              const SizedBox(width: 8),
              Text(
                'Search Music (Optional)',
                style: AppTextStyles.bodyOnDark.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          TextField(
            controller: _searchController,
            style: AppTextStyles.bodyOnDark,
            decoration: InputDecoration(
              hintText: 'Search for a song, artist, or album...',
              hintStyle: AppTextStyles.bodyOnDark.copyWith(
                color: AppColors.onDarkSecondary,
              ),
              prefixIcon: const Icon(Icons.search, color: AppColors.primary),
              suffixIcon: _isSearching
                  ? const SizedBox(
                      width: 20,
                      height: 20,
                      child: CircularProgressIndicator(strokeWidth: 2),
                    )
                  : null,
              filled: true,
              fillColor: AppColors.darkSurface,
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(15),
                borderSide: BorderSide.none,
              ),
              contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
            ),
            onChanged: (value) {
              if (value.length > 2) {
                _searchMusic(value);
              } else {
                setState(() {
                  _searchResults = [];
                });
                _searchAnimationController.reverse();
              }
            },
          ),
          
          // Search results
          AnimatedBuilder(
            animation: _searchAnimationController,
            builder: (context, child) {
              return SizeTransition(
                sizeFactor: _searchAnimationController,
                child: _searchResults.isNotEmpty
                    ? Container(
                        margin: const EdgeInsets.only(top: 16),
                        decoration: BoxDecoration(
                          color: AppColors.darkSurface,
                          borderRadius: BorderRadius.circular(15),
                          border: Border.all(
                            color: AppColors.glassBorder,
                            width: 1,
                          ),
                        ),
                        child: ListView.builder(
                          shrinkWrap: true,
                          physics: const NeverScrollableScrollPhysics(),
                          itemCount: _searchResults.length,
                          itemBuilder: (context, index) {
                            final track = _searchResults[index];
                            return ListTile(
                              leading: Container(
                                width: 40,
                                height: 40,
                                decoration: BoxDecoration(
                                  color: AppColors.primary.withOpacity(0.1),
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: track['releases']?[0] != null
                                    ? ClipRRect(
                                        borderRadius: BorderRadius.circular(8),
                                        child: Image.network(
                                          _musicBrainzService.getCoverArtUrl(track['releases'][0]['id']),
                                          fit: BoxFit.cover,
                                          errorBuilder: (context, error, stackTrace) {
                                            return const Icon(
                                              Icons.music_note,
                                              color: AppColors.primary,
                                              size: 20,
                                            );
                                          },
                                        ),
                                      )
                                    : const Icon(
                                        Icons.music_note,
                                        color: AppColors.primary,
                                        size: 20,
                                      ),
                              ),
                              title: Text(
                                track['title'] ?? 'Unknown Title',
                                style: AppTextStyles.bodyOnDark.copyWith(
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              subtitle: Text(
                                track['artist-credit']?[0]?['name'] ?? 'Unknown Artist',
                                style: AppTextStyles.captionOnDark,
                              ),
                              onTap: () => _selectTrack(track),
                            );
                          },
                        ),
                      )
                    : const SizedBox.shrink(),
              );
            },
          ),
          
          // Selected track
          if (_selectedTrack != null) ...[
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    AppColors.primary.withOpacity(0.1),
                    AppColors.primaryAccent.withOpacity(0.1),
                  ],
                ),
                borderRadius: BorderRadius.circular(15),
                border: Border.all(
                  color: AppColors.primary.withOpacity(0.3),
                  width: 1,
                ),
              ),
              child: Row(
                children: [
                  Container(
                    width: 40,
                    height: 40,
                    decoration: BoxDecoration(
                      color: AppColors.primary,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: const Icon(
                      Icons.check,
                      color: Colors.white,
                      size: 20,
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          _selectedTrack!['title'] ?? 'Unknown Title',
                          style: AppTextStyles.bodyOnDark.copyWith(
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          _selectedTrack!['artist-credit']?[0]?['name'] ?? 'Unknown Artist',
                          style: AppTextStyles.captionOnDark,
                        ),
                      ],
                    ),
                  ),
                  GestureDetector(
                    onTap: _clearSelectedTrack,
                    child: Container(
                      padding: const EdgeInsets.all(8),
                      decoration: BoxDecoration(
                        color: AppColors.onDarkTertiary.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: const Icon(
                        Icons.close,
                        color: AppColors.onDarkSecondary,
                        size: 16,
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildDescriptionInput() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(20),
        color: AppColors.glassBackground,
        border: Border.all(
          color: AppColors.glassBorder,
          width: 1,
        ),
        boxShadow: [
          BoxShadow(
            color: AppColors.shadowDark,
            blurRadius: 15,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Icon(
                Icons.edit,
                color: AppColors.primary,
                size: 20,
              ),
              const SizedBox(width: 8),
              Text(
                'What\'s on your mind?',
                style: AppTextStyles.bodyOnDark.copyWith(
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          TextField(
                  controller: _descriptionController,
                  maxLines: null,
                  maxLength: _maxDescriptionLength,
                  style: AppTextStyles.bodyOnDark,
                  decoration: InputDecoration(
              hintText: _selectedTrack != null 
                  ? 'Share your thoughts about this track...'
                  : 'What\'s on your mind? Share your thoughts...',
                    hintStyle: AppTextStyles.bodyOnDark.copyWith(
                      color: AppColors.onDarkSecondary,
                    ),
                    border: InputBorder.none,
                    counterStyle: AppTextStyles.captionOnDark.copyWith(
                      color: _descriptionController.text.length > _maxDescriptionLength * 0.9
                          ? AppColors.error
                          : AppColors.onDarkSecondary,
                    ),
                  ),
                ),
        ],
      ),
    );
  }

  Widget _buildBottomBar() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: AppColors.glassBackground,
        border: Border(
          top: BorderSide(
            color: AppColors.glassBorder,
            width: 1,
          ),
        ),
      ),
      child: Row(
        children: [
          Icon(
            Icons.info_outline,
            color: AppColors.onDarkSecondary,
            size: 16,
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              'Your post will be visible to all users',
              style: AppTextStyles.captionOnDark.copyWith(
                color: AppColors.onDarkSecondary,
              ),
            ),
          ),
        ],
      ),
    );
  }
}